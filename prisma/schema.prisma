// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationRole {
  ADMIN
  MEMBER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  memberships         Membership[]
  organizations       Organization[] @relation("OrganizationsCreated")
  invitationsSent     Invitation[]   @relation("InvitationsSent")
  invitationsAccepted Invitation[]   @relation("InvitationsAccepted")
}

model Organization {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdById String

  createdBy    User         @relation("OrganizationsCreated", fields: [createdById], references: [id])
  memberships  Membership[]
  invitations  Invitation[]

  @@index([createdById])
}

model Membership {
  id             String            @id @default(cuid())
  userId         String
  organizationId String
  role           OrganizationRole
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId, role])
}

model Invitation {
  id             String            @id @default(cuid())
  organizationId String
  email          String
  role           OrganizationRole
  token          String            @unique
  invitedById    String
  createdAt      DateTime          @default(now())
  expiresAt      DateTime
  acceptedAt     DateTime?
  acceptedById   String?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User         @relation("InvitationsSent", fields: [invitedById], references: [id], onDelete: Cascade)
  acceptedBy   User?        @relation("InvitationsAccepted", fields: [acceptedById], references: [id])

  @@index([organizationId, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
